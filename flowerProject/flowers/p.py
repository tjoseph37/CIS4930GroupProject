import os
import sys
import math

sbox = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67,
        0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59,
        0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7,
        0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1,
        0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05,
        0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83,
        0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29,
        0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
        0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa,
        0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c,
        0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc,
        0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec,
        0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19,
        0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee,
        0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49,
        0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4,
        0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6,
        0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70,
        0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9,
        0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e,
        0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1,
        0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0,
        0x54, 0xbb, 0x16]
rsbox =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3,
        0x9e, 0x81, 0xf3, 0xd7, 0xfb , 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f,
        0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb , 0x54,
        0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b,
        0x42, 0xfa, 0xc3, 0x4e , 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24,
        0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25 , 0x72, 0xf8,
        0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d,
        0x65, 0xb6, 0x92 , 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,
        0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84 , 0x90, 0xd8, 0xab,
        0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3,
        0x45, 0x06 , 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1,
        0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b , 0x3a, 0x91, 0x11, 0x41,
        0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6,
        0x73 , 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9,
        0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e , 0x47, 0xf1, 0x1a, 0x71, 0x1d,
        0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b ,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0,
        0xfe, 0x78, 0xcd, 0x5a, 0xf4 , 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07,
        0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f , 0x60,
        0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f,
        0x93, 0xc9, 0x9c, 0xef , 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5,
        0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61 , 0x17, 0x2b,
        0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55,
        0x21, 0x0c, 0x7d]

def rotate(word):
    return word[1:] + word[:1]

Rcon = [0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,
        0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97,
        0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72,
        0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66,
        0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
        0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d,
        0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
        0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61,
        0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
        0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
        0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc,
        0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5,
        0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a,
        0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d,
        0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c,
        0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
        0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4,
        0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
        0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08,
        0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
        0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d,
        0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2,
        0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74,
        0xe8, 0xcb ]

keySize = dict(SIZE_128=16, SIZE_192=24, SIZE_256=32)

def expandKey(key, size, expandedKeySize):
    currentSize = 0
    rconIteration = 1
    expandedKey = [0] * expandedKeySize

    for j in range(size):
        expandedKey[j] = key[j]
    currentSize += size

    while currentSize < expandedKeySize:
        t = expandedKey[currentSize-4:currentSize]

        if currentSize % size == 0:
            t = rotate(t)
            for i in range(4):
                t[i] = sbox[t[i]]
            t[0] = t[0] ^ Rcon[rconIteration]
            rconIteration += 1
        if size == keySize["SIZE_256"] and ((currentSize % size) == 16):
            for l in range(4): t[l] = sbox[t[l]]

        for m in range(4):
            expandedKey[currentSize] = expandedKey[currentSize - size] ^ t[m]
            currentSize += 1
    return expandedKey

def addRoundKey(state, roundKey):
    for i in range(16):
        state[i] ^= roundKey[i]
    return state

def createRoundKey(expandedKey, roundKeyPointer):
    roundKey = [0] * 16
    for i in range(4):
        for j in range(4):
            roundKey[j*4+i] = expandedKey[roundKeyPointer + i*4 + j]
    return roundKey

def g(a, b):
    p = 0
    for counter in range(8):
        if b & 1: p ^= a
        hi_bit_set = a & 0x80
        a <<= 1
        # keep a 8 bit
        a &= 0xFF
        if hi_bit_set:
            a ^= 0x1b
        b >>= 1
    return p

def subBytes(state, isInv):
    if isInv:
        for i in range(16): state[i] = sbox[state[i]]
    else:
        for i in range(16): state[i] = rsbox[state[i]]
    return state

def shiftRows(state, isInv):
    for i in range(4):
        state = shiftRow(state, i*4, i, isInv)
    return state

def shiftRow(state, statePointer, nbr, isInv):
    for i in range(nbr):
        if isInv:
            state[statePointer:statePointer+4] = state[statePointer+3:statePointer+4] + state[statePointer:statePointer+3]
        else:
            state[statePointer:statePointer+4] = state[statePointer+1:statePointer+4] + state[statePointer:statePointer+1]
    return state

def mixColumns(state, isInv):
    for i in range(4):
        column = state[i:i+16:4]
        column = mixColumn(column, isInv)
        state[i:i+16:4] = column
    return state

def mixColumn(column, isInv):
    if isInv: mult = [14, 9, 13, 11]
    else: mult = [2, 1, 1, 3]
    cpy = list(column)
    column[0] = g(cpy[0], mult[0]) ^ g(cpy[3], mult[1]) ^ g(cpy[2], mult[2]) ^ g(cpy[1], mult[3])
    column[1] = g(cpy[1], mult[0]) ^ g(cpy[0], mult[1]) ^ g(cpy[3], mult[2]) ^ g(cpy[2], mult[3])
    column[2] = g(cpy[2], mult[0]) ^ g(cpy[1], mult[1]) ^ g(cpy[0], mult[2]) ^ g(cpy[3], mult[3])
    column[3] = g(cpy[3], mult[0]) ^ g(cpy[2], mult[1]) ^ g(cpy[1], mult[2]) ^ g(cpy[0], mult[3])
    return column

def aes_round(state, roundKey):
    state = subBytes(state, False)
    state = shiftRows(state, False)
    state = mixColumns(state, False)
    state = addRoundKey(state, roundKey)
    return state

def aes_invRound(state, roundKey):
    state = shiftRows(state, True)
    state = subBytes(state, True)
    state = addRoundKey(state, roundKey)
    state = mixColumns(state, True)
    return state

def aes_main(state, expandedKey, nbrRounds):
    state = addRoundKey(state, createRoundKey(expandedKey, 0))
    i = 1
    while i < nbrRounds:
        state = aes_round(state,createRoundKey(expandedKey, 16*i))
        i += 1
    state = subBytes(state, False)
    state = shiftRows(state, False)
    state = addRoundKey(state,createRoundKey(expandedKey, 16*nbrRounds))
    return state

def aes_invMain(state, expandedKey, nbrRounds):
    state = addRoundKey(state,createRoundKey(expandedKey, 16*nbrRounds))
    i = nbrRounds - 1
    while i > 0:
        state = aes_invRound(state,createRoundKey(expandedKey, 16*i))
        i -= 1
    state = shiftRows(state, True)
    state = subBytes(state, True)
    state = addRoundKey(state, createRoundKey(expandedKey, 0))
    return state

def encrypt_aes(iput, key, size):
    output = [0] * 16
    nbrRounds = 0
    block = [0] * 16
    if size == keySize["SIZE_128"]: nbrRounds = 10
    elif size == keySize["SIZE_192"]: nbrRounds = 12
    elif size == keySize["SIZE_256"]: nbrRounds = 14
    else: return None

    expandedKeySize = 16*(nbrRounds+1)

    for i in range(4):
        for j in range(4):
            block[(i+(j*4))] = iput[(i*4)+j]

    expandedKey = expandKey(key, size, expandedKeySize)
    block = aes_main(block, expandedKey, nbrRounds)
    for k in range(4):
        for l in range(4):
            output[(k*4)+l] = block[(k+(l*4))]
    return output

def decrypt_aes(iput, key, size):
    output = [0] * 16
    nbrRounds = 0
    block = [0] * 16
    if size == keySize["SIZE_128"]: nbrRounds = 10
    elif size == keySize["SIZE_192"]: nbrRounds = 12
    elif size == keySize["SIZE_256"]: nbrRounds = 14
    else: return None

    expandedKeySize = 16*(nbrRounds+1)

    for i in range(4):
        for j in range(4):
            block[(i+(j*4))] = iput[(i*4)+j]
    expandedKey = expandKey(key, size, expandedKeySize)
    block = aes_invMain(block, expandedKey, nbrRounds)
    for k in range(4):
        for l in range(4):
            output[(k*4)+l] = block[(k+(l*4))]
    return output

def convertString(string, start, end):
    ar = [0] * 16
    i = start
    j = 0
    while len(ar) < end - start:
        ar.append(0)
    while i < end:
        ar[j] = string[i]
        j += 1
        i += 1
    return ar

def encrypt(stringIn, key, size, IV):
    if len(key) % size:
        return None
    if len(IV) % 16:
        return None
    plaintext = []
    iput = [0] * 16
    output = []
    ciphertext = [0] * 16
    cipherOut = []
    firstRound = True
    if stringIn != None:
        for j in range(int(math.ceil(float(len(stringIn))/16))):
            start = j*16
            end = j*16+16
            if  end > len(stringIn):
                end = len(stringIn)
            plaintext = convertString(stringIn, start, end)
            for i in range(16):
                if firstRound:
                    iput[i] =  plaintext[i] ^ IV[i]
                else:
                    iput[i] =  plaintext[i] ^ ciphertext[i]
            firstRound = False
            ciphertext = encrypt_aes(iput, key, size,)
            for k in range(16):
                cipherOut.append(ciphertext[k])
    return len(stringIn), cipherOut

def decrypt(cipherIn, originalsize, key, size, IV):
    if len(key) % size:
        return None
    if len(IV) % 16:
        return None
    ciphertext = []
    iput = []
    output = []
    plaintext = [0] * 16
    chrOut = []
    firstRound = True
    if cipherIn != None:
        for j in range(int(math.ceil(float(len(cipherIn))/16))):
            start = j*16
            end = j*16+16
            if j*16+16 > len(cipherIn):
                end = len(cipherIn)
            ciphertext = cipherIn[start:end]
            output = decrypt_aes(ciphertext, key, size)
            for i in range(16):
                if firstRound:
                    plaintext[i] = IV[i] ^ output[i]
                else:
                    plaintext[i] = iput[i] ^ output[i]
            firstRound = False
            if originalsize is not None and originalsize < end:
                for k in range(originalsize-start):
                    chrOut.append(chr(plaintext[k]))
            else:
                for k in range(end-start):
                    chrOut.append(chr(plaintext[k]))
            iput = ciphertext
    return "".join(chrOut)

if __name__ == "__main__":
    f = open("map.png","rb")
    jpgdata = f.read()
    f.close()
    pt = bytearray(jpgdata)
    cypherkey = [143,194,34,208,145,203,230,143,177,246,97,206,145,92,255,84]
    iv = [103,35,148,239,76,213,47,118,255,222,123,176,106,134,98,92]
    olen, ciph = encrypt(pt,cypherkey, keySize["SIZE_128"], iv)
    decr = decrypt(ciph, olen, cypherkey,keySize["SIZE_128"], iv)
    f = open("b.png","w")
    f.write(decr)
    f.close()
